name: build & push (debian Buster, Bullseye, Bookworm & Trixie)

env:
  DEBIAN_FRONTEND: noninteractive
  GET_CTR_LOG: debug
  REG_USER: "robot$debian+bot_actions_2024"
  ZSTD_LV: 18
  REG_URI: reg.tmoe.me:2096
  GET_CTR_CMD: docker run -i --rm -v /usr/local/bin:/host --pull always reg.tmoe.me:2096/rs/get-ctr:x64 cp get-ctr /host
  INSTALL_DEPS: |
    sudo apt-get update
    if [[ ! -e app.deb ]]; then
      docker run -t --rm -v $PWD:/app reg.tmoe.me:2096/debs/debootstrap:1.0.134 mv /app.deb /app
    fi
    for i in ./app.deb qemu-user-static systemd-container; do
      sudo apt-get install -y $i
    done

on:
  push:
    # branches:
    #   - master
    paths:
      - ".github/workflows/debian.yml"

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        include:
          # - os: debian
          #   ver: "1.3"
          # - os: debian
          #   ver: "2.0"
          # - os: debian
          #   ver: "2.1"
          # - os: debian
          #   ver: "2.2"
          #   tag: base
          # - os: debian
          #   ver: "2.2"
          # - os: debian
          #   ver: "3.0"
          # - os: debian
          #   ver: "3.1"
          # - os: debian
          #   ver: "4.0"
          # - os: debian
          #   ver: "5.0"
          # - os: debian
          #   ver: "5.0"
          # - os: debian
          #   ver: "6.0"
          # - os: debian
          #   ver: "7"
          # - os: debian
          #   ver: "8"
          # - os: debian
          #   ver: "9"
          # - os: debian
          #   ver: "10"
          # - os: debian
          #   ver: "11"
          # - os: debian
          #   ver: "12"
          # - os: debian
          #   ver: "13"
          - os: debian
            ver: "unstable"
            arch: amd64

          - os: debian
            ver: "unstable"
            arch: i386
    runs-on: ubuntu-latest
    env:
      build_cmd: get-ctr --os ${{matrix.os}} --ver ${{matrix.ver}} --tag ${{matrix.tag}} --arch ${{matrix.arch}}

    steps:
      - name: preparations
        run: |
          ${{env.INSTALL_DEPS}}
          ${{env.GET_CTR_CMD}}

      - name: Login to REG
        uses: docker/login-action@v3
        with:
          registry: ${{env.REG_URI}}
          username: ${{env.REG_USER}}
          password: ${{ secrets.REG_TOKEN }}

      - name: download & repack rootfs & save cache
        run: ${{env.build_cmd}} --obtain --repack --zstd-level ${{env.ZSTD_LV}} --save-cache
  restore:
    needs: build
    runs-on: ubuntu-latest
    env:
      build_cmd: get-ctr --os ${{matrix.os}} --ver ${{matrix.ver}} --tag ${{matrix.tag}}
    steps:
      - name: Login to REG
        uses: docker/login-action@v3
        with:
          registry: ${{env.REG_URI}}
          username: ${{env.REG_USER}}
          password: ${{ secrets.REG_TOKEN }}
      - name: restore cache
        run: |
          ${{env.GET_CTR_CMD}}
          for arch in amd64 i386; do
            ${{env.build_cmd}} --restore-cache --arch $arch
          done
          ls -lah

  # docker:
  #   runs-on: ubuntu-latest
  #   # defaults:
  #   #   run:
  #   #     shell: zsh -f -e {0}
  #   env:
  #     digests_ron: digests.ron
  #     digests_yaml: digests.yml
  #     build_cmd: get-ctr --os ${{matrix.os}} --ver ${{matrix.ver}} --tag ${{matrix.tag}}

  #   steps:
  #     - name: get `get-ctr` bin from docker
  #       run: ${{env.GET_CTR_CMD}}

  #     - name: install qemu-user & debootstrap
  #       run: ${{env.INSTALL_DEPS}}

  #     - name: +RELEASE_TAG env
  #       run: echo RELEASE_TAG=$(${{env.build_cmd}} --release-tag) >>$GITHUB_ENV

  #     - name: Login to GHCR
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Login to REG
  #       uses: docker/login-action@v3
  #       with:
  #         registry: reg.tmoe.me:2096
  #         username: ${{env.REG_USER}}
  #         password: ${{ secrets.REG_TOKEN }}

  #     - name: download & repack rootfs
  #       run: ${{env.build_cmd}} --obtain --repack --zstd-level ${{env.ZSTD_LV}}

  #     - name: build container
  #       run: ${{env.build_cmd}} --build

  #     - name: push to ghcr & reg
  #       run: ${{env.build_cmd}} --push

  #     - name: create manifest
  #       run: ${{env.build_cmd}} --create-manifest --update-repo-digest

  #     - name: generate digests.{ron,yml}
  #       run: ${{env.build_cmd}} --digest ${{env.digests_ron}} --digest ${{env.digests_yaml}}

  #     - name: create digests.md
  #       run: |
  #         echo '```yaml' > digests.md
  #         cat tmp/${{env.digests_yaml}} >> digests.md
  #         echo '```' >> digests.md
  #         echo TITLE=$(${{env.build_cmd}} --title) >>$GITHUB_ENV

  #     - name: release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         fail_on_unmatched_files: true
  #         tag_name: ${{env.RELEASE_TAG}}
  #         name: ${{env.TITLE}}
  #         files: |
  #           tmp/zstd/*.zst
  #           tmp/${{env.digests_ron}}
  #           tmp/${{env.digests_yaml}}
  #         body_path: digests.md
