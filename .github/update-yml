#!/bin/zsh -fe
cd ${0:h}/workflows
log_lv=$UPDATE_YML_LOG
tmpl=sid.yml

local -A ver_map=(
    buster 10
    bullseye 11
    bookworm 12
    trixie 13
    # forky 14
)
# --------------
error() {
    print >&2 -P "%B%F{red}[ERROR]%b%f $*"
}
info() {
    print >&2 -P "%F{cyan}[INFO]%f $*"
}
debug() {
    case $log_lv {
        (debug|trace) ;;
        (*) return 0 ;;
    }
    print >&2 -Pr "%F{blue}[DEBUG]%f $*"
}

io::Error::not_found() {
    error "I/O Error, '$1' was not found."
}
# --------------
debug $(local -p ver_map)

integer year=$(date +%Y)
debug year: $year
if ((year == 0)) {
    year=2024
}


for series ver (${(kv)ver_map}) {
    info "%F{blue}key%f:" $series "\t%F{blue}value%f:" $ver

    title_case=$series
    title_case[1]=${(U)series[1]}
    debug title_case: $title_case

    args=(
        --regexp-extended

        # /sid.yml -> /$series.yml (e.g., /bookworm.yml)
        --expression
        "s@/sid(\.yml)@/$series\1@g"


        # Debian-Sid -> Debian-${series.to_title_case()} (e.g., Debian-Bookworm.yml)
        --expression
        "s@(Debian)-Sid@\1-$title_case@g"

        # .SID_ -> .${series.to_upper_case()}_ (e.g., .BOOKWORM_)
        --expression
        "s@(\.)SID_@\1${(U)series}_@g"

        # VER: unstable -> VER: $series
        --expression
        "s@(^\s+VER:)\s*unstable\$@\1 $series@g"

        # delete line 
        --expression
        '/auto-task.build-time\s+=/d'

        --expression
        '/on:\s*\{\s*("push"|"schedule"):/d'
    )


    unset cron
    case $series {
        # BUSTER_CMD = get-ctr --os debian --ver 10
        # BUSTER_MATRIX = {"arch":["i386","amd64","arm64","ppc64el","mips64el","mipsel", "mips", "s390x","armhf", "armel"]}
        # BUSTER_ARCHS = "i386" "amd64" "arm64" "ppc64el" "mips64el" "mipsel" "mips" "s390x" "armhf" "armel"

        # release: 2019-07;  eol: 2022-09;  eol-lts: 2024-06;  eol-elts: 2029-06
        (buster) 
        case $year {
            (2024) cron='10 10 10 6 *' ;;
        }
        ;;

        # BULLSEYE_CMD = get-ctr --os debian --ver 11
        # BULLSEYE_MATRIX = {"arch":["i386","amd64","arm64","ppc64el","mips64el","mipsel", "s390x","armhf","armel"]}
        # BULLSEYE_ARCHS = "i386"  "amd64"  "arm64"  "ppc64el"  "mips64el"  "mipsel"  "s390x"  "armhf"  "armel"
        # 2021; 2024; 2026
        (bullseye)
            case $year {
                (2024) cron='11 11 11 * *' ;;
                (2025|2026) cron='11 11 11 5,11 * ' ;;
            }
        ;;

        # BOOKWORM_CMD = get-ctr --os debian --ver 12
        # BOOKWORM_MATRIX = {"arch":["i386","amd64","arm64","ppc64el","mips64el","mipsel", "s390x","armhf","armel"]}
        # BOOKWORM_ARCHS = "i386" "amd64" "arm64" "ppc64el" "mips64el" "mipsel" "s390x" "armhf" "armel"
        # 2023; 2026; 2028
        (bookworm)
            case $year {
                (2024|2025)
                 cron='12 12 12,24 * *' ;;
                (2026) cron='12 12 12 * *';;
                (2027|2028) cron='12 12 12 6,12 *' ;;
            }
        ;;

        # TRIXIE_CMD = get-ctr --os debian --ver 13
        # +riscv64?
        # TRIXIE_MATRIX = {"arch":["i386","amd64","arm64","ppc64el","mips64el","s390x","armhf","armel"]}
        # TRIXIE_ARCHS = "i386" "amd64" "arm64" "ppc64el" "mips64el" "s390x" "armhf" "armel"
        # 2025; 2028; 2030
        (trixie)
            case $year {
                (2024) cron='13 13 */13 * *'  ;;
                (2025|2026|2027) cron='13 13 13,26 * *' ;;
                (2028) cron='13 13 13 * *' ;;
                (2029|2030) cron='13 13 13 1,7 *' ;;
            }
        ;;

        # 2027; 2030; 2032 
        # (forky)
        #     if ((year <= 2025)) {
        #         error "Until 2025-06, you should be using sid, not forky."
        #         exit 0
        #     }
        # ;;
    }

    if (($+cron)) {
        debug cron: $cron
        # args.push()
        args+=(
            --expression
            "1a\on: {\"schedule\": [{\"cron\": '$cron'}]}"
        )
    }

    if ! (($+cron)) {
        args+=(
            --expression
            # 
            # "on":{"push":{"paths":[".github\/workflows\/sid.yml"]}}
            "1a\on: {\"push\":{\"paths\":[\".github/workflows/${series}.yml\"]}}"
        )
    }

    if [[ ! -e $tmpl ]] {
        io::Error::not_found $tmpl
        exit 1
    }
    # Template file 
    args+=$tmpl

    debug "%F{green}sed %f$args"
    sed $args > $series.yml
}
