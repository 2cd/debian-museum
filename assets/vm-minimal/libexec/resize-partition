#!/usr/bin/env zsh
set -fexo pipefail
# Depends: e2fsprogs-extra | e2fsprogs, sfdisk | fdisk (>= 2.29) | libfdisk1, parted (>= 3.2-17), awk, coreutils, util-linux
# Recommends: btrfs-progs, mount
# ----------------
resize2fs=/usr/sbin/resize2fs
sfdisk=/sbin/sfdisk
parted=/usr/sbin/parted
vendored_bin_dir=/var/lib/tmm/vendor/xbin

# fix ubuntu 15.04 ~ 16.10 & debian 8
#
# Use **VENDORED** binary as jessie's dependencies are too old.
() {
    local pkg bin
    for pkg (sfdisk parted) {
        bin=${vendored_bin_dir}/$pkg
        if [[ -e $bin ]] {
            #
            case $pkg {
                (sfdisk) sfdisk=$bin ;;
                (parted)
                parted=$bin
                # skip_check_parted=true
            ;;
            }
        }
    }

}
# ----------------
# ----------------
typeset -x LC_ALL=C

error() {
    print -P >&2 -- "%F{red}[ERROR]%f" $*
}

# check_deps
() {
    local bin
    for bin ($sfdisk $parted $resize2fs) {
        if [[ ! -e $bin ]] {
            local name=${bin:t}
            local cmd=$commands[$name]
            if (($#cmd)) {
                #
                case $name {
                    (sfdisk)    sfdisk=$cmd    ;;
                    (resize2fs) resize2fs=$cmd ;;
                    (parted)    parted=$cmd    ;;
                    (*)         exit 127       ;;
                }
                continue
            }
            error Please install %F{green}${bin}%f first
            exit 127
        }
    }
}
if ((UID != 0)) {
    error Please run it as root
    exit 1
}
local -A unpartitioned_disk_map
# get_unpartitioned_disks
() {
    unpartitioned_disk_map=(
        $(
            sfdisk -F 2>&1 | awk -v true=1 -v false=0 'BEGIN {
                mismatch = false
            }
            /GPT PMBR size mismatch / {
                mismatch = true
            }
            /Unpartitioned space / {
                bytes = $6
                if (bytes == 0 && !mismatch) {
                    next
                }
                # $3=/dev/vda:
                split($3, device, ":")
                dev = device[1]
                print(dev)
                print(mismatch)
                if (mismatch) {
                    mismatch = false
                }
            }'
        )
    )
    if ((! $#unpartitioned_disk_map)) {
        df -T | awk '/\/$/ {
            if ($2 ~ /^ext/) {
                cmd = sprintf("resize2fs %s", $1)
                system(cmd)
            }
            # if ($2 == "btrfs") {
            #     system("btrfs filesystem resize max /")
            # }
        }'
        exit 0
    }
}
local -p unpartitioned_disk_map
now=$(date +%Y-%m-%d_%H-%M-%S)
# dump_table
() {
    local d
    local dir=/var/lib/tmm/bak/sfdisk/
    mkdir -p $dir
    for d (${(k)unpartitioned_disk_map}) {
        sfdisk -d $d > "$dir/${d:t}_${now}"
    }
}

# extend_partition
disk_node_arr=()
() {
    local d
    for d mismatch (${(kv)unpartitioned_disk_map}) {
        if ((mismatch)) {
            parted --script --fix ${d} print
        }
        local dev_num=$(
            # For compatibility with debian stretch `mawk`, do not use `^[[:space:]]`.
            parted --script ${d} print free | awk '/^ /{
            last_num = num
            num=$1
            if ($0 ~/Free Space$/) {
                count += 1
            }
            if (count == 2) {
                print(last_num)
                exit
            }
        }'
        )
        if (($#dev_num)) {
            print -R Yes | parted ---pretend-input-tty ${d} resizepart ${dev_num} 100%
            local node
            case ${d:t} {
                (nvme*) node=${d}p${dev_num} ;;
                (*)     node=${d}${dev_num}  ;;
            }
            disk_node_arr+=(${node})
        }
    }
}

if ((! $#disk_node_arr)) {
    exit
}

partprobe || ${vendored_bin_dir}/partprobe

# resize_file_system
() {
    for dev ($disk_node_arr) {
        #
        fs_type=$(blkid -o value -s TYPE $dev ||:)
        case $fs_type {
            (btrfs)
                tmp_mount_point=$(mktemp -d)
                mount -v $dev $tmp_mount_point
                # If you don't have btrfs-progs installed, then this will just exit (127).
                btrfs filesystem resize max $tmp_mount_point
                umount -lvf $tmp_mount_point
                rmdir $tmp_mount_point
            ;;
            (*)
                fsck -fy $dev || print >&2 "Failed to check $dev"
                resize2fs $dev || {
                    print -P >&2 -- "%F{yellow}[WARN]%f Failed to resize the ext4/ext3 partition: $dev"
                    fsck -fcyv $dev ||:
                    resize2fs $dev
                }
            ;;
        }
    }
}

