#!/usr/bin/env zsh
set -fexo pipefail
#
# Depends: qemu-system-x86 (>= 7), virtiofsd (>= 1), podman | lxc, coreutils, awk
#
# true | false
# kvm=false
kvm=true

virtio_fsd=true

name=debian

# TCP port range: 1024 ~ 65535
ssh_port=9022

# "podman" | "lxc"
sandbox=podman
# ------------------
socket_dir=${XDG_RUNTIME_DIR:-/run/user/$UID}

warn() {
    print -P >&2 -- '%F{yellow}[WARN]%f' $*
}
panic() {
    print -P >&2 -- '%F{red}[ERROR]%f' $*
    exit 1
}
info() {
    print -P >&2 -- '%F{cyan}[INFO]%f' $*
}
if [[ ! -e /dev/kvm || $(uname -m) != x86_64 ]] {
    warn DISABLE KVM
    kvm=false
}

vfsd_bin=/usr/libexec/virtiofsd
if [[ ! -e $vfsd_bin ]] {
    warn DISABLE VIRTIO-FSD
    virtio_fsd=false
}

if {$virtio_fsd} {
    if [[ ! -e $socket_dir ]] {
        mkdir -pv $socket_dir || socket_dir=$(mktemp -d)
    }

    sock_file=$socket_dir/${name}-vfsd.sock
    rm -fv $sock_file ||:
    pid_f=${sock_file}.pid
    if [[ -e $pid_f ]] {
        info "pid file: $pid_f"
        pid=$(< $pid_f)
        kill -s TERM $pid ||:
    }

    info "socket file: $sock_file"
    lxc_ns=(
        lxc-usernsexec
        -m b:0:1000:1
        -m b:1:100000:65536
    )
    podman_ns=(
        podman
        unshare
    )
    vfsd=(
        $vfsd_bin
        --socket-path=$sock_file
        --shared-dir $PWD
        --announce-submounts
        --sandbox chroot
    )
    case $sandbox {
        (lxc)    $lxc_ns    -- $vfsd & ;;
        (podman) $podman_ns -- $vfsd & ;;
        (*) panic "Please change the value of sandbox to 'podman' or 'lxc' (e.g., sandbox=lxc)" ;;
    }
}

qemu_cmd=(
    # qemu-system-amd64
    qemu-system-x86_64
)

args=(
    -machine q35,accel=kvm:tcg
    # -vga none
    -display none
    # -display curses

    -smp $(nproc)
    # vda
    -drive file=disk.raw,format=raw,if=virtio

    # vdb
    -drive file=usr.qcow2,if=virtio

    # vdc
    -drive file=var.qcow2,if=virtio

    -name $name
    -device virtio-net-pci,netdev=nat0
    -netdev "user,id=nat0,hostfwd=tcp:127.0.0.1:${ssh_port}-:22"
    -boot menu=off

    # TL;DR. Press Ctrl+A, and then Press C, finally Press Enter.
    #
    # By default, this control sequence is Ctrl-a followed by c. Press Ctrl-a first, then release, and then press c, you can switch between the QEMU monitor and the serial console.
    -chardev stdio,mux=on,id=char0
    -mon chardev=char0,mode=readline
    -serial chardev:char0
)
memory=$(
    env LANG=C free -m | awk '/Mem:/ {
        ava = $NF
        exit
    } END {
        float_ava = ava * 0.9
        printf("%dM", float_ava)
    }'
)
args+=(
    -m $memory
)

if {$virtio_fsd} {
    args+=(
        -chardev
            "socket,id=char1,path=$sock_file"
        -device
            vhost-user-fs-pci,queue-size=1024,chardev=char1,tag=sd
        -object
            "memory-backend-memfd,id=mem,size=$memory,share=on"
        -numa
            node,memdev=mem
    )
}
if {$kvm} {
    args+=(
        -cpu  host
    )
} else {
    args+=(
        -cpu  qemu64-v1
    )
}

info 'Waiting for %F{blue}virtio_fsd%f socket to be created'
# timeout 10s
for i ({1..100}) {
    if [[ -e $sock_file ]] {
        break
    }
    info $i
    sleep 0.1
}
if [[ ! -e $sock_file ]] {
    panic 'Please %F{red}disable %F{cyan}VirtioFSD%f (i.e., virtio_fsd=false)'
}

$qemu_cmd $args $*
